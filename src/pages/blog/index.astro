---
import { type CollectionEntry, getCollection } from "astro:content"
import PageLayout from "@layouts/PageLayout.astro"
import TopLayout from "@layouts/TopLayout.astro"
import BottomLayout from "@layouts/BottomLayout.astro"
import ArrowCard from "@components/ArrowCard.astro"
import Tags from "@components/Tags.astro"
import { BLOG } from "@consts"

const data = (await getCollection("blog"))
	.filter((post) => !post.data.draft)
	.sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf())

const tags = [...new Set(data.flatMap((post) => post.data.tags))].sort((a, b) =>
	a.localeCompare(b)
)

type Acc = {
	[year: string]: CollectionEntry<"blog">[]
}

const posts = data.reduce((acc: Acc, post) => {
	const year = post.data.date.getFullYear().toString()
	if (!acc[year]) {
		acc[year] = []
	}
	acc[year].push(post)
	return acc
}, {})

const years = Object.keys(posts).sort((a, b) => parseInt(b) - parseInt(a))
---

<PageLayout title={BLOG.TITLE} description={BLOG.DESCRIPTION}>
	<TopLayout>
		<div class="animate">
			<h1 class="text-3xl font-semibold text-black dark:text-white mt-2">
				{BLOG.TITLE}
			</h1>
			<div class="mt-1">
				{BLOG.DESCRIPTION}
			</div>
			<div class="mt-2">
				<Tags tags={tags} />
			</div>
		</div>
	</TopLayout>
	<BottomLayout>
		<div class="space-y-16">
			{
				years.map((year) => (
					<section class="animate space-y-4">
						<div class="font-semibold text-black dark:text-white">
							{year}
						</div>
						<div>
							<ul class="flex flex-col gap-4">
								{posts[year].map((post) => (
									<li data-tagged={post.data.tags.join(",")}>
										<ArrowCard entry={post} />
									</li>
								))}
							</ul>
						</div>
					</section>
				))
			}
		</div>
	</BottomLayout>
</PageLayout>
